#!/usr/bin/env ruby

#
# summarize -- generate performance one-liners from Rails log input (:info or :debug)
#
#

#
# opts
#

if ARGV.reject! { |x| x == '--help' || x == '-h' }
  STDERR.puts "usage: summarize [--help] [--full_url] [logfile]"
  exit 1
end

full_url = true if ARGV.reject! { |x| x == '--full_url' }

#
# rip
#

begin
  stream = ( ARGV[0] && open(ARGV[0]) ) || STDIN
rescue
  STDERR.puts "fatal: Hmm, we can't open [#{ARGV[0]}]."
  exit 1
end

stream.read.split(/^\s*$/).each do |s|
  next if s !~ /^Processing.+Completed/m

  ip, time = s.match(/\(for (.+?) at (.+?)\)/)[1..-1]

  #puts s

  final_time, reqs_per_sec = s.match(/Completed in (\S+?) \((\S+?) reqs\/sec\)/)[1..-1]
  http_status, url         = s.match(/\| (\d+) \w+ \[(.+?)\]$/)[1..-1]

  render_time, render_perc = s =~ /200 OK/ ? s.match(/Rendering: (\S+?) \((\d+)/)[1..-1] : [ '0.0--00', '0' ]
  db_time, db_perc         = s =~ /DB: /   ? s.match(/DB: (\S+) \((\d+)/)[1..-1]         : [ '0.0--00', '0' ]

  url.gsub!(/^http:\/\/[^\/]+(.+)$/i, '\1') if not full_url

  puts sprintf("%15s %s | r %s %2s%% | db %s %2s%% | %s %4s r/s | %s %s",
    ip, time, render_time, render_perc, db_time, db_perc, final_time, reqs_per_sec, http_status, url)
end
